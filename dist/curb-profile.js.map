{"version":3,"sources":["../src/curb-profile.js"],"names":["CurbProfile","data","billing","_embedded","_links","id","display_name","realtime","href","real_time","ws","topic","prefix","registers","keyBy","val","forEach","register_groups","group","name","me","register","isArray","groups","push","cb","client","connect","on","subscribe","message","JSON","parse","measurements","mapMeasurements","console","error","err","warn","map","key","value","multiplier","flip_domain"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;IAEaA,W,WAAAA,W;AACZ,sBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AACjB,OAAKC,OAAL,GAAeD,KAAKE,SAAL,CAAeD,OAA9B;AACA,SAAO,KAAKA,OAAL,CAAaE,MAApB;;AAEA,OAAKC,EAAL,GAAUJ,KAAKI,EAAf;AACA,OAAKC,YAAL,GAAoBL,KAAKK,YAAzB;;AAEA,OAAKC,QAAL,GAAgB;AACfC,SAAMP,KAAKQ,SAAL,CAAe,CAAf,EAAkBL,MAAlB,CAAyBM,EAAzB,CAA4BF,IADnB;AAEfG,UAAOV,KAAKQ,SAAL,CAAe,CAAf,EAAkBE,KAFV;AAGfC,WAAQX,KAAKQ,SAAL,CAAe,CAAf,EAAkBG;AAHX,GAAhB;;AAMA,OAAKC,SAAL,GAAiB,iBAAEC,KAAF,CAAQb,KAAKE,SAAL,CAAeU,SAAf,CAAyBA,SAAjC,EAA4C,eAAO;AACnE,UAAOE,IAAIV,EAAX;AACA,GAFgB,CAAjB;;AAIA,mBAAEW,OAAF,CAAUf,KAAKgB,eAAf,EAAgC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD,oBAAEH,OAAF,CAAUE,KAAV,EAAiB,oBAAY;AAC5B,QAAME,KAAK,MAAKP,SAAL,CAAeQ,SAAShB,EAAxB,CAAX;AACA,QAAI,CAAC,iBAAEiB,OAAF,CAAUF,GAAGG,MAAb,CAAL,EAA2B;AAC1BH,QAAGG,MAAH,GAAY,EAAZ;AACA;;AAEDH,OAAGG,MAAH,CAAUC,IAAV,CAAeL,IAAf;AACA,IAPD;AAQA,GATD;AAWA;;;;wBAEKM,E,EAAI;AAAA;;AACT,OAAMC,SAAS,eAAKC,OAAL,CAAa,KAAKpB,QAAL,CAAcC,IAA3B,CAAf;;AAEAkB,UAAOE,EAAP,CAAU,SAAV,EAAqB,YAAM;AAC1BF,WAAOG,SAAP,CAAiB,OAAKtB,QAAL,CAAcI,KAA/B;AACA,IAFD;;AAIAe,UAAOE,EAAP,CAAU,SAAV,EAAqB,UAACjB,KAAD,EAAQmB,OAAR,EAAoB;AACxC,QAAM7B,OAAO8B,KAAKC,KAAL,CAAWF,OAAX,CAAb;;AAEA,QAAI7B,KAAKgC,YAAT,EAAuB;AACtBhC,UAAKgC,YAAL,GAAoB,OAAKC,eAAL,CAAqBjC,KAAKgC,YAA1B,CAApB;AACA;;AAEDR,OAAGxB,IAAH;AACA,IARD;;AAUAyB,UAAOE,EAAP,CAAU,OAAV,EAAmB,eAAO;AACzBO,YAAQC,KAAR,CAAcC,GAAd;AACA,IAFD;;AAIAX,UAAOE,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC5BO,YAAQG,IAAR,gCAA0C,OAAKhC,YAA/C;AACA,IAFD;;AAIAoB,UAAOE,EAAP,CAAU,OAAV,EAAmB,YAAM;AACxBO,YAAQG,IAAR,mCAA6C,OAAKhC,YAAlD;AACA,IAFD;AAGA;;;kCAEeL,I,EAAM;AAAA;;AACrB,UAAO,iBAAEsC,GAAF,CAAMtC,IAAN,EAAY,UAACc,GAAD,EAAMyB,GAAN,EAAc;AAChC,QAAMnC,KAAQ,OAAKE,QAAL,CAAcK,MAAtB,SAAgC4B,GAAtC;AACA,QAAMnB,WAAW,OAAKR,SAAL,CAAeR,EAAf,CAAjB;;AAEA,WAAO;AACNA,SAAIA,EADE;AAENoC,YAAO1B,MAAMM,SAASqB,UAAf,IAA6BrB,SAASsB,WAAT,GAAuB,CAAC,CAAxB,GAA4B,CAAzD;AAFD,KAAP;AAIA,IARM,CAAP;AASA","file":"curb-profile.js","sourcesContent":["import _ from 'lodash';\nimport mqtt from 'mqtt';\n\nexport class CurbProfile {\n\tconstructor(data) {\n\t\tthis.billing = data._embedded.billing;\n\t\tdelete this.billing._links;\n\n\t\tthis.id = data.id;\n\t\tthis.display_name = data.display_name;\n\n\t\tthis.realtime = {\n\t\t\thref: data.real_time[0]._links.ws.href,\n\t\t\ttopic: data.real_time[0].topic,\n\t\t\tprefix: data.real_time[0].prefix\n\t\t}\n\n\t\tthis.registers = _.keyBy(data._embedded.registers.registers, val => {\n\t\t\treturn val.id;\n\t\t});\n\n\t\t_.forEach(data.register_groups, (group, name) => {\n\t\t\t_.forEach(group, register => {\n\t\t\t\tconst me = this.registers[register.id];\n\t\t\t\tif (!_.isArray(me.groups)) {\n\t\t\t\t\tme.groups = [];\n\t\t\t\t}\n\n\t\t\t\tme.groups.push(name);\n\t\t\t});\n\t\t});\n\n\t}\n\n\twatch(cb) {\n\t\tconst client = mqtt.connect(this.realtime.href);\n\n\t\tclient.on('connect', () => {\n\t\t\tclient.subscribe(this.realtime.topic);\n\t\t});\n\n\t\tclient.on('message', (topic, message) => {\n\t\t\tconst data = JSON.parse(message);\n\n\t\t\tif (data.measurements) {\n\t\t\t\tdata.measurements = this.mapMeasurements(data.measurements);\n\t\t\t}\n\n\t\t\tcb(data);\n\t\t});\n\n\t\tclient.on('error', err => {\n\t\t\tconsole.error(err);\n\t\t});\n\n\t\tclient.on('reconnect', () => {\n\t\t\tconsole.warn(`Reconnected to stream for ${this.display_name}`);\n\t\t});\n\n\t\tclient.on('close', () => {\n\t\t\tconsole.warn(`Disconnected from stream for ${this.display_name}`);\n\t\t});\n\t}\n\n\tmapMeasurements(data) {\n\t\treturn _.map(data, (val, key) => {\n\t\t\tconst id = `${this.realtime.prefix}:${key}`;\n\t\t\tconst register = this.registers[id];\n\n\t\t\treturn {\n\t\t\t\tid: id,\n\t\t\t\tvalue: val * register.multiplier * (register.flip_domain ? -1 : 1)\n\t\t\t};\n\t\t});\n\t}\n}\n"]}