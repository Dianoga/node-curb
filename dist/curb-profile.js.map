{"version":3,"sources":["../src/curb-profile.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;IAEa,W,WAAA,W;AACZ,sBAAY,IAAZ,EAAkB;AAAA;;AAAA;;AACjB,OAAK,OAAL,GAAe,KAAK,SAAL,CAAe,OAA9B;AACA,SAAO,KAAK,OAAL,CAAa,MAApB;;AAEA,OAAK,EAAL,GAAU,KAAK,EAAf;AACA,OAAK,YAAL,GAAoB,KAAK,YAAzB;;AAEA,OAAK,QAAL,GAAgB;AACf,SAAM,KAAK,SAAL,CAAe,CAAf,EAAkB,MAAlB,CAAyB,EAAzB,CAA4B,IADnB;AAEf,UAAO,KAAK,SAAL,CAAe,CAAf,EAAkB,KAFV;AAGf,WAAQ,KAAK,SAAL,CAAe,CAAf,EAAkB;AAHX,GAAhB;;AAMA,OAAK,SAAL,GAAiB,iBAAE,KAAF,CAAQ,KAAK,SAAL,CAAe,SAAf,CAAyB,SAAjC,EAA4C,eAAO;AACnE,UAAO,IAAI,EAAX;AACA,GAFgB,CAAjB;;AAIA,mBAAE,OAAF,CAAU,KAAK,eAAf,EAAgC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AAChD,oBAAE,OAAF,CAAU,KAAV,EAAiB,oBAAY;AAC5B,QAAM,KAAK,MAAK,SAAL,CAAe,SAAS,EAAxB,CAAX;AACA,QAAI,CAAC,iBAAE,OAAF,CAAU,GAAG,MAAb,CAAL,EAA2B;AAC1B,QAAG,MAAH,GAAY,EAAZ;AACA;;AAED,OAAG,MAAH,CAAU,IAAV,CAAe,IAAf;AACA,IAPD;AAQA,GATD;AAWA;;;;wBAEK,E,EAAI;AAAA;;AACT,OAAM,SAAS,eAAK,OAAL,CAAa,KAAK,QAAL,CAAc,IAA3B,CAAf;;AAEA,UAAO,EAAP,CAAU,SAAV,EAAqB,YAAM;AAC1B,WAAO,SAAP,CAAiB,OAAK,QAAL,CAAc,KAA/B;AACA,IAFD;;AAIA,UAAO,EAAP,CAAU,SAAV,EAAqB,UAAC,KAAD,EAAQ,OAAR,EAAoB;AACxC,QAAM,OAAO,KAAK,KAAL,CAAW,OAAX,CAAb;;AAEA,QAAI,KAAK,YAAT,EAAuB;AACtB,UAAK,YAAL,GAAoB,OAAK,eAAL,CAAqB,KAAK,YAA1B,CAApB;AACA;;AAED,OAAG,IAAH;AACA,IARD;;AAUA,UAAO,EAAP,CAAU,OAAV,EAAmB,eAAO;AACzB,YAAQ,KAAR,CAAc,GAAd;AACA,IAFD;;AAIA,UAAO,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC5B,YAAQ,IAAR,gCAA0C,OAAK,YAA/C;AACA,IAFD;;AAIA,UAAO,EAAP,CAAU,OAAV,EAAmB,YAAM;AACxB,YAAQ,IAAR,mCAA6C,OAAK,YAAlD;AACA,IAFD;AAGA;;;kCAEe,I,EAAM;AAAA;;AACrB,UAAO,iBAAE,GAAF,CAAM,IAAN,EAAY,UAAC,GAAD,EAAM,GAAN,EAAc;AAChC,QAAM,KAAQ,OAAK,QAAL,CAAc,MAAtB,SAAgC,GAAtC;AACA,QAAM,WAAW,OAAK,SAAL,CAAe,EAAf,CAAjB;;AAEA,WAAO;AACN,SAAI,EADE;AAEN,YAAO,MAAM,SAAS,UAAf,IAA6B,SAAS,WAAT,GAAuB,CAAC,CAAxB,GAA4B,CAAzD;AAFD,KAAP;AAIA,IARM,CAAP;AASA","file":"curb-profile.js","sourcesContent":["import _ from 'lodash';\nimport mqtt from 'mqtt';\n\nexport class CurbProfile {\n\tconstructor(data) {\n\t\tthis.billing = data._embedded.billing;\n\t\tdelete this.billing._links;\n\n\t\tthis.id = data.id;\n\t\tthis.display_name = data.display_name;\n\n\t\tthis.realtime = {\n\t\t\thref: data.real_time[0]._links.ws.href,\n\t\t\ttopic: data.real_time[0].topic,\n\t\t\tprefix: data.real_time[0].prefix\n\t\t}\n\n\t\tthis.registers = _.keyBy(data._embedded.registers.registers, val => {\n\t\t\treturn val.id;\n\t\t});\n\n\t\t_.forEach(data.register_groups, (group, name) => {\n\t\t\t_.forEach(group, register => {\n\t\t\t\tconst me = this.registers[register.id];\n\t\t\t\tif (!_.isArray(me.groups)) {\n\t\t\t\t\tme.groups = [];\n\t\t\t\t}\n\n\t\t\t\tme.groups.push(name);\n\t\t\t});\n\t\t});\n\n\t}\n\n\twatch(cb) {\n\t\tconst client = mqtt.connect(this.realtime.href);\n\n\t\tclient.on('connect', () => {\n\t\t\tclient.subscribe(this.realtime.topic);\n\t\t});\n\n\t\tclient.on('message', (topic, message) => {\n\t\t\tconst data = JSON.parse(message);\n\n\t\t\tif (data.measurements) {\n\t\t\t\tdata.measurements = this.mapMeasurements(data.measurements);\n\t\t\t}\n\n\t\t\tcb(data);\n\t\t});\n\n\t\tclient.on('error', err => {\n\t\t\tconsole.error(err);\n\t\t});\n\n\t\tclient.on('reconnect', () => {\n\t\t\tconsole.warn(`Reconnected to stream for ${this.display_name}`);\n\t\t});\n\n\t\tclient.on('close', () => {\n\t\t\tconsole.warn(`Disconnected from stream for ${this.display_name}`);\n\t\t});\n\t}\n\n\tmapMeasurements(data) {\n\t\treturn _.map(data, (val, key) => {\n\t\t\tconst id = `${this.realtime.prefix}:${key}`;\n\t\t\tconst register = this.registers[id];\n\n\t\t\treturn {\n\t\t\t\tid: id,\n\t\t\t\tvalue: val * register.multiplier * (register.flip_domain ? -1 : 1)\n\t\t\t};\n\t\t});\n\t}\n}\n"]}