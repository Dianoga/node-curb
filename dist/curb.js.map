{"version":3,"sources":["../src/curb.js"],"names":["Curb","opts","Object","assign","clientId","clientSecret","logger","_curbApiUrl","_curbTokenUrl","locations","token","api","create","baseURL","_handleToken","bind","_refreshToken","getLocations","watch","username","password","_getToken","then","post","client_id","client_secret","grant_type","audience","scope","refresh_token","resp","data","defaults","headers","common","Authorization","access_token","setTimeout","expires_in","Error","get","forEach","location","id","catch","console","error","e","socket","reconnect","transports","on","emit","keys","key","locationId","updateCircuits","circuits"],"mappings":"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","file":"curb.js","sourcesContent":["import axios from 'axios';\nimport io from 'socket.io-client';\n\nimport { CurbLocation } from './';\n\nexport class Curb {\n\tconstructor(opts) {\n\t\tthis.opts = Object.assign({\n\t\t\tclientId: null,\n\t\t\tclientSecret: null,\n\t\t\tlogger: () => {}\n\t\t}, opts);\n\n\t\tthis._curbApiUrl = 'https://app.energycurb.com/api';\n\t\tthis._curbTokenUrl = 'https://energycurb.auth0.com/oauth/token';\n\n\t\tthis.locations = {};\n\n\t\tthis.token = null;\n\n\t\tthis.api = axios.create({\n\t\t\tbaseURL: this._curbApiUrl\n\t\t});\n\n\t\tthis._handleToken = this._handleToken.bind(this);\n\t\tthis._refreshToken = this._refreshToken.bind(this);\n\t\tthis.getLocations = this.getLocations.bind(this);\n\t\tthis.watch = this.watch.bind(this);\n\t}\n\n\tinit(username, password) {\n\t\treturn this._getToken(username, password)\n\t\t\t.then(this.getLocations);\n\t}\n\n\t_getToken(username, password) {\n\t\tthis.opts.logger('Getting access token');\n\t\treturn this.api.post(this._curbTokenUrl, {\n\t\t\tclient_id: this.opts.clientId,\n\t\t\tclient_secret: this.opts.clientSecret,\n\t\t\tgrant_type: 'password',\n\t\t\taudience: 'app.energycurb.com/api',\n\t\t\tscope: 'offline_access',\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(this._handleToken);\n\t}\n\n\t_refreshToken() {\n\t\tthis.opts.logger('Refreshing access token');\n\t\treturn this.api.post(this._curbTokenUrl, {\n\t\t\tgrant_type: 'refresh_token',\n\t\t\tclient_id: this.opts.clientId,\n\t\t\tclient_secret: this.opts.clientSecret,\n\t\t\trefresh_token: this.token.refresh_token\n\t\t}).then(this._handleToken);\n\t}\n\n\t_handleToken(resp) {\n\t\t// Curb doesn't seem to give us a new refresh token\n\t\tif (!resp.data.refresh_token && this.token.refresh_token) {\n\t\t\tresp.data.refresh_token = this.token.refresh_token;\n\t\t}\n\n\t\tthis.token = resp.data;\n\t\tthis.api.defaults.headers.common.Authorization = `Bearer ${this.token.access_token}`;\n\n\t\t// Setup token refresh 1 minute before expiration\n\t\tsetTimeout(this._refreshToken, (this.token.expires_in - 60) * 1000);\n\t}\n\n\tgetLocations() {\n\t\tif (!this.token) {\n\t\t\tthrow Error('No access token');\n\t\t}\n\n\t\tthis.opts.logger('Getting locations');\n\t\treturn this.api.get(`${this._curbApiUrl}/locations`)\n\t\t\t.then(resp => {\n\t\t\t\tresp.data.forEach(location => {\n\t\t\t\t\tthis.locations[location.id] = new CurbLocation(location);\n\t\t\t\t});\n\n\t\t\t\treturn this.locations;\n\t\t\t}).catch(e => {\n\t\t\t\tconsole.error(e);\n\t\t\t});\n\t}\n\n\twatch() {\n\t\tif (!this.token) {\n\t\t\tthrow Error('No access token');\n\t\t}\n\n\t\tthis.opts.logger('Connecting to socket');\n\n\t\tconst socket = io(`${this._curbApiUrl}/circuit-data`, { reconnect: true, transports: ['websocket'] });\n\n\t\tsocket.on('connect', () => {\n\t\t\tthis.opts.logger('Connected to socket: sending auth');\n\t\t\tsocket.emit('authenticate', { token: this.token.access_token });\n\t\t});\n\n\t\tsocket.on('authorized', () => {\n\t\t\tthis.opts.logger('Socket authorized: subscribing to live data');\n\n\t\t\tObject.keys(this.locations).forEach(key => {\n\t\t\t\tsocket.emit('subscribe', key);\n\t\t\t});\n\t\t});\n\n\t\tsocket.on('data', data => {\n\t\t\t// Does the location exist?\n\t\t\tif (!this.locations[data.locationId]) {\n\t\t\t\tthis.opts.logger(`Unknown location: ${data.locationId}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.locations[data.locationId].updateCircuits(data.circuits);\n\t\t});\n\n\t\tsocket.on('connect_error', e => console.error(e));\n\t\tsocket.on('error', e => console.error(e));\n\t}\n}\n"]}